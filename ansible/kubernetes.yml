---
- name: open ports with firewalld
  hosts: k8s_nodes
  become: true
  roles:
    - role: k8s_firewalld

# so they can register through the load-balancer, otherwise
# they won't be able to use it.
- name: set the HAProxy load balancer
  hosts: k8s_api_proxy
  become: true
  roles:
    - role: k8s_haproxy

- name: prepare k8s nodes
  hosts: k8s_nodes
  become: true
  roles:
    - role: k8s_nodes

- name: set up first k8s control nodes
  hosts: k8s_controllers[0]
  become: true
  roles:
    - role: kubernetes_controllers

- name: set up remaining k8s control nodes
  hosts: k8s_controllers[1:]
  become: true
  roles:
    - role: kubernetes_controllers

# This needs to be done before the worker node are set up

- name: set up k8s DE worker nodes
  hosts: k8s_de_workers
  become: true
  roles:
    - role: kubernetes_service_workers

- name: set up k8s VICE worker nodes
  hosts: k8s_vice_workers
  become: true
  roles:
    - role: kubernetes_vice_workers

- name: set up k8s GPU worker nodes
  hosts: k8s_gpu_workers
  become: true
  roles:
    - role: kubernetes_gpu_workers

# This is limited to the first controller node to prevent it from
# running multiple times, once per host. It's not actually limited
# to the first controller node.
- name: set up irods-csi-driver
  hosts: k8s_controllers[0]
  connection: local
  become: false
  roles:
    - role: kubernetes_irods_csi_driver

# This is limited to the first controller node to prevent it from
# running multiple times, once per host. It's not actually limited
# to the first controller node.
- name: set up kubernetes requirements for the DE
  hosts: k8s_controllers[0]
  connection: local
  become: false
  roles:
    - role: kubernetes_de_reqs
