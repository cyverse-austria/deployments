---
- name: init db | create connection user
  delegate_to: localhost
  community.postgresql.postgresql_user:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    db: "{{ pg_db }}"
    name: "{{ dbms_connection_user }}"
    password: "{{ dbms_connection_pass }}"
  when: create_user is defined and create_user

- name: init db | create the grouper user
  delegate_to: localhost
  community.postgresql.postgresql_user:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    db: "{{ pg_db }}"
    name: "{{ grouper_connection_user }}"
    password: "{{ grouper_connection_pass }}"
  when: create_user is defined and create_user and grouper is defined and grouper

- name: init db  | create de database
  delegate_to: localhost
  community.postgresql.postgresql_db:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    name: "de"
    owner: "{{ dbms_connection_user }}"
    encoding: "{{ encoding }}"
    lc_collate: "{{ lc_collate }}"
    lc_ctype: "{{ lc_ctype }}"
    template: "{{ template }}"
  when: create_dbs is defined and create_dbs

- name: init db | install uuid-ossp for de database
  delegate_to: localhost
  community.postgresql.postgresql_ext:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    db: "de"
    name: "uuid-ossp"
  when: install_exts is defined and install_exts

- name: init db | install moddatetime for de database
  delegate_to: localhost
  community.postgresql.postgresql_ext:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    db: "de"
    name: "moddatetime"
  when: install_exts is defined and install_exts

- name: init db | install btree_gist for de database
  delegate_to: localhost
  community.postgresql.postgresql_ext:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    db: "de"
    name: "btree_gist"
  when: install_exts is defined and install_exts

- name: init db  | create notifications database
  delegate_to: localhost
  community.postgresql.postgresql_db:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    name: "notifications"
    owner: "{{ dbms_connection_user }}"
    encoding: "{{ encoding }}"
    lc_collate: "{{ lc_collate }}"
    lc_ctype: "{{ lc_ctype }}"
    template: "{{ template }}"
  when: create_dbs is defined and create_dbs

- name: init db | install uuid-ossp for notifications database
  delegate_to: localhost
  community.postgresql.postgresql_ext:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    db: "notifications"
    name: "uuid-ossp"
  when: install_exts is defined and install_exts

- name: init db  | create metadata database
  delegate_to: localhost
  community.postgresql.postgresql_db:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    name: "metadata"
    owner: "{{ dbms_connection_user }}"
    encoding: "{{ encoding }}"
    lc_collate: "{{ lc_collate }}"
    lc_ctype: "{{ lc_ctype }}"
    template: "{{ template }}"
  when: create_dbs is defined and create_dbs

- name: init db | install uuid-ossp for metdata database
  delegate_to: localhost
  community.postgresql.postgresql_ext:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    db: "metadata"
    name: "uuid-ossp"
  when: install_exts is defined and install_exts

- name: init db | create the de_releases database
  delegate_to: localhost
  community.postgresql.postgresql_db:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    name: "de_releases"
    owner: "{{ dbms_connection_user }}"
    encoding: "{{ encoding }}"
    lc_collate: "{{ lc_collate }}"
    lc_ctype: "{{ lc_ctype }}"
    template: "{{ template }}"
  when: create_dbs is defined and create_dbs

- name: init db | install uuid-ossp for the de_releases database
  delegate_to: localhost
  community.postgresql.postgresql_ext:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    db: "de_releases"
    name: "uuid-ossp"
  when: install_exts is defined and install_exts

- name: init db | install moddatetime for the de_releases database
  delegate_to: localhost
  community.postgresql.postgresql_ext:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    db: "de_releases"
    name: "moddatetime"
  when: install_exts is defined and install_exts

- name: init db  | create grouper database
  delegate_to: localhost
  community.postgresql.postgresql_db:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    name: "grouper"
    owner: "{{ grouper_connection_user }}"
    encoding: "{{ encoding }}"
    lc_collate: "{{ lc_collate }}"
    lc_ctype: "{{ lc_ctype }}"
    template: "{{ template }}"
  when: create_dbs is defined and create_dbs and grouper is defined and grouper

- name: init db  | create qms database
  delegate_to: localhost
  community.postgresql.postgresql_db:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    name: "qms"
    owner: "{{ dbms_connection_user }}"
    encoding: "{{ encoding }}"
    lc_collate: "{{ lc_collate }}"
    lc_ctype: "{{ lc_ctype }}"
    template: "{{ template }}"
  when: create_dbs is defined and create_dbs and qms is defined and qms

- name: init db | install uuid-ossp for qms database
  delegate_to: localhost
  community.postgresql.postgresql_ext:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    db: "qms"
    name: "uuid-ossp"
  when: install_exts is defined and install_exts and qms is defined and qms

- name: init db | install moddatetime for qms database
  delegate_to: localhost
  community.postgresql.postgresql_ext:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    db: "qms"
    name: "moddatetime"
  when: install_exts is defined and install_exts and qms is defined and qms

- name: init db | install btree_gist for qms database
  delegate_to: localhost
  community.postgresql.postgresql_ext:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    db: "qms"
    name: "btree_gist"
  when: install_exts is defined and install_exts and qms is defined and qms

- name: init_db | install insert_username for qms database
  delegate_to: localhost
  community.postgresql.postgresql_ext:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    db: "qms"
    name: "insert_username"
  when: install_exts is defined and install_exts and qms is defined and qms

- name: init db  | create unleash database
  delegate_to: localhost
  community.postgresql.postgresql_db:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    name: "unleash"
    owner: "{{ dbms_connection_user }}"
    encoding: "{{ encoding }}"
    lc_collate: "{{ lc_collate }}"
    lc_ctype: "{{ lc_ctype }}"
    template: "{{ template }}"
  when: create_dbs is defined and create_dbs and unleash is defined and unleash

- name: init db | create k3s database
  delegate_to: localhost
  community.postgresql.postgresql_db:
    login_host: "{{ groups['dbms_primary'][0] }}"
    port: "{{ pg_listen_port }}"
    login_user: "{{ pg_login_user }}"
    login_password: "{{ pg_login_password }}"
    name: "k3s"
    owner: "{{ dbms_connection_user }}"
    encoding: "{{ encoding }}"
    lc_collate: "{{ lc_collate }}"
    lc_ctype: "{{ lc_ctype }}"
    template: "{{ template }}"
  when: create_dbs is defined and create_dbs

- name: init db | create staging directory
  delegate_to: localhost
  ansible.builtin.tempfile:
    state: directory
    suffix: "-dbs"
  register: dbs_dir

- name: check for migrate command
  delegate_to: localhost
  command: which migrate
  changed_when: false
  register: migrate_installed
  failed_when: migrate_installed.rc not in [0, 1]

- name: init db | extract migrate tarball
  delegate_to: localhost
  ansible.builtin.unarchive:
    src: "https://github.com/golang-migrate/migrate/releases/download/{{ migrate_release_version }}/{{ migrate_tarball_name }}"
    dest: "{{ dbs_dir.path }}"
    remote_src: yes
    creates: "{{ dbs_dir.path }}/migrate"
  when: migrate_installed.rc == 1

- name: init db | install migrate
  delegate_to: localhost
  become: true
  become_user: root
  ansible.builtin.copy:
    src: "{{ dbs_dir.path }}/migrate"
    dest: "{{ install_dir }}/migrate"
    mode: 0755
  when: migrate_installed.rc == 1

- name: init db | checkout de database repo
  delegate_to: localhost
  ansible.builtin.git:
    repo: "https://github.com/cyverse-de/de-database"
    dest: "{{ dbs_dir.path }}/de-database"
    clone: yes
    update: yes
    force: yes
    version: "{{ de_db_version }}"

- name: init db | checkout notifications database repo
  delegate_to: localhost
  ansible.builtin.git:
    repo: "https://github.com/cyverse-de/notifications-db"
    dest: "{{ dbs_dir.path }}/notifications-db"
    clone: yes
    update: yes
    force: yes
    version: "{{ notifications_db_version }}"

- name: init db | checkout metadata database repo
  delegate_to: localhost
  ansible.builtin.git:
    repo: "https://github.com/cyverse-de/metadata-db"
    dest: "{{ dbs_dir.path }}/metadata-db"
    clone: yes
    update: yes
    force: yes
    version: "{{ metadata_db_version }}"

- name: init db | checkout the mgmt repo for the de_releases schema
  delegate_to: localhost
  ansible.builtin.git:
    repo: "https://github.com/cyverse-de/mgmt"
    dest: "{{ dbs_dir.path }}/mgmt"
    clone: yes
    update: yes
    force: yes
    version: "{{ mgmt_version }}"

- name: init db | run de database migrations
  delegate_to: localhost
  ansible.builtin.command: |
    {{install_dir}}/migrate -database "postgresql://{{dbms_connection_user }}:{{dbms_connection_pass}}@{{ groups['dbms_primary'][0] }}:{{ pg_listen_port }}/de?sslmode=disable" -path "{{ dbs_dir.path }}/de-database/migrations" up
  when: migrate is defined and migrate

- name: init db | run metadata db migrations
  delegate_to: localhost
  ansible.builtin.command: |
    {{install_dir}}/migrate -database "postgresql://{{dbms_connection_user}}:{{dbms_connection_pass}}@{{ groups['dbms_primary'][0] }}:{{ pg_listen_port }}/metadata?sslmode=disable" -path "{{ dbs_dir.path }}/metadata-db/migrations" up
  when: migrate is defined and migrate

- name: init db | run notifications db migrations
  delegate_to: localhost
  ansible.builtin.command: |
    {{install_dir}}/migrate -database "postgresql://{{dbms_connection_user}}:{{dbms_connection_pass}}@{{ groups['dbms_primary'][0] }}:{{ pg_listen_port }}/notifications?sslmode=disable" -path "{{ dbs_dir.path }}/notifications-db/migrations" up
  when: migrate is defined and migrate

- name: init db | run mgmt db migrations
  delegate_to: localhost
  ansible.builtin.command: |
    {{install_dir}}/migrate -database "postgresql://{{dbms_connection_user}}:{{dbms_connection_pass}}@{{ groups['dbms_primary'][0] }}:{{ pg_listen_port }}/de_releases?sslmode=disable" -path "{{ dbs_dir.path }}/mgmt/db/migrations" up
  when: migrate is defined and migrate

- name: init db | remove staging directory
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ dbs_dir.path }}"
    state: absent
  when: dbs_dir.path is defined and cleanup is defined and cleanup
