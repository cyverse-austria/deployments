---
- name: install elrepo-release
  ansible.builtin.package:
    name: elrepo-release
    state: present
  when: ansible_os_family == "RedHat"

- name: install epel-release
  ansible.builtin.package:
    name: epel-release
    state: present
  when: ansible_os_family == "RedHat"

- name: Check for nfs 4.1 support in the kernel
  lineinfile:
    name: /boot/config-{{ ansible_kernel }}
    line: "CONFIG_NFS_V4_1=y"
    state: present
  check_mode: yes
  register: nfs_v4_1
  failed_when: (nfs_v4_1 is changed) or (nfs_v4_1 is failed)

- name: Check for nfs 4.2 support in the kernel
  lineinfile:
    name: /boot/config-{{ ansible_kernel }}
    line: "CONFIG_NFS_V4_2=y"
    state: present
  check_mode: yes
  register: nfs_v4_2
  failed_when: (nfs_v4_2 is changed) or (nfs_v4_2 is failed)

- name: install wireguard
  ansible.builtin.package:
    name: wireguard
    state: present
  when: (do_wireguard is undefined or do_wireguard) and (ansible_os_family == "Debian") | bool

- name: install wireguard
  ansible.builtin.package:
    name: wireguard-tools
    state: present
  when: (do_wireguard is undefined or do_wireguard) and (ansible_os_family == "RedHat") | bool

- name: install nfsv4 client on debian systems
  ansible.builtin.package:
    name: nfs-common
    state: present
  when: ansible_os_family == "Debian"

- name: install nfsv4 client on red hat systems
  ansible.builtin.package:
    name: nfs-utils
    state: present
  when: ansible_os_family == "RedHat"

- name: install required command-line utils
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - bash
    - curl
    - util-linux
    - grep
    - gawk

- name: install open-iscsi when on debian systems
  ansible.builtin.package:
    name: open-iscsi
    state: present
  when: ansible_os_family == "Debian"

- name: install iscsi-initiator-utils when on red hat systems
  ansible.builtin.package:
    name: iscsi-initiator-utils
    state: present
  when: ansible_os_family == "RedHat"

- name: set iscsi initiator name on red hat systems
  ansible.builtin.shell:
    cmd: echo "InitiatorName=$(/sbin/iscsi-iname)" > /etc/iscsi/initiatorname.iscsi
    creates: /etc/iscsi/initiatorname.iscsi

- name: enable iscsid on red hat systems
  ansible.builtin.service:
    name: iscsid
    state: started
    enabled: true
  when: ansible_os_family == "RedHat"

- name: Add the iscsi_tcp module
  community.general.modprobe:
    name: iscsi_tcp
    state: present

- community.general.ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  loop:
    - port: 6443 # required for k3s api
      proto: tcp
    - port: 10250 # kubelet metrics
      proto: tcp
    - port: 5001 # embedded registry
      proto: tcp
    - port: 51820:51821 # wireguard
      proto: udp
    - port: 30000:32767 # nodePorts
      proto: tcp
  when: (do_open_ports is undefined or do_open_ports) and (ansible_os_family == "Debian") | bool

- name: open tcp ports
  ansible.builtin.iptables:
    chain: INPUT
    jump: ACCEPT
    protocol: tcp
    destination_ports:
      - "6443" # k3s api
      - "10250" # kubelet metrics
      - "5001" # "embedded registry"
      - "30000:32767" # nodePorts
  when: (do_open_ports is undefined or do_open_ports) and (ansible_os_family == "RedHat") | bool

- name: open udp ports
  ansible.builtin.iptables:
    chain: INPUT
    jump: ACCEPT
    protocol: udp
    destination_ports:
      - "51820:51821" # wireguard
  when: (do_open_ports is undefined or do_open_ports) and (ansible_os_family == "RedHat") | bool

- community.general.ufw:
    rule: allow
    src: "{{ item }}"
  loop:
    - 10.42.0.0/16 # k3s pods
    - 10.43.0.0/16 # k3s services
  when: (do_open_ports is undefined or do_open_ports) and (ansible_os_family == "Debian") | bool

- name: download k3s installation script locally.
  delegate_to: localhost
  become: false
  ansible.builtin.get_url:
    url: https://get.k3s.io
    dest: "./k3s_install.sh"
    mode: "a+x"

- name: upload k3s installation script
  ansible.builtin.copy:
    src: "./k3s_install.sh"
    dest: "/usr/local/bin/k3s_install.sh"
    mode: "a+x"

- name: create /etc/rancher/k3s/ directory
  ansible.builtin.file:
    path: "/etc/rancher/k3s/"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: copy registries.yaml
  ansible.builtin.template:
    src: "registries.yaml.j2"
    dest: "/etc/rancher/k3s/registries.yaml"
    owner: root
    group: root
    mode: "0644"

- name: copy the storage_fix.sh file
  ansible.builtin.template:
    src: storage_fix.sh.j2
    dest: "/root/storage_fix.sh"
    owner: root
    group: root
    mode: "0744"
  when: k3s_use_storage_mount

- name: reboot nodes
  ansible.builtin.reboot:
  when: do_reboot is undefined or do_reboot | bool
