---
- delegate_to: localhost
  environment:
    KUBECONFIG: "{{ lookup('env', 'KUBECONFIG') }}"
  block:
    - name: install ingress-nginx repo
      kubernetes.core.helm_repository:
        name: ingress-nginx
        repo_url: https://kubernetes.github.io/ingress-nginx

    - name: install ingress-nginx controller
      kubernetes.core.helm:
        name: ingress-nginx
        chart_ref: ingress-nginx/ingress-nginx
        release_namespace: ingress-nginx
        create_namespace: true
        values:
          controller:
            service:
              type: NodePort
              nodePorts:
                http: "31343"
                https: "31344"

    - name: create the namespaces for the services
      kubernetes.core.k8s:
        name: "{{ item }}"
        state: present
        kind: namespace
        api_version: v1
      loop:
        - "{{ ns }}"
        - "{{ vice_ns }}"

    - name: create the default deny (except for DNS) egress network policy for the vice namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: default-deny-egress
            namespace: "{{ vice_ns }}"
          spec:
            podSelector: {}
            policyTypes:
              - Egress
            egress:
              - to:
                ports:
                  - protocol: TCP
                    port: 53
                  - protocol: UDP
                    port: 53

    - name: create the egress-any network policy for the vice namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: egress-any
            namespace: "{{ vice_ns }}"
          spec:
            podSelector: {}
            policyTypes:
              - Egress
            egress:
              - to:
                  - ipBlock:
                      cidr: 0.0.0.0/0
                      except:
                        - 10.43.0.0/8
                        - 128.196.254.64/32
                        - 131.153.56.98/32
              - to:
                  - namespaceSelector: {}
                    podSelector:
                      matchLabels:
                        de-app: app-exposer
              - to:
                  - namespaceSelector: {}
                    podSelector:
                      matchLabels:
                        de-app: check-resource-access
              - to:
                  - namespaceSelector: {}
                    podSelector:
                      matchLabels:
                        de-app: get-analysis-id

    - name: create the vice-app-runner ServiceAccount
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: vice-app-runner
            namespace: "{{ vice_ns }}"
          automountServiceAccountToken: true

    - name: create the configurator service account
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: configurator
            namespace: "{{ ns }}"
          automountServiceAccountToken: true

    - name: create the app-exposer service account
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: app-exposer
            namespace: "{{ ns }}"
          automountServiceAccountToken: true

    - name: create the vice-apps Role
      kubernetes.core.k8s:
        state: present
        definition:
          kind: Role
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            namespace: "{{ vice_ns }}"
            name: vice-apps
          rules:
            - apiGroups: [""]
              resources: [""]
              verbs: [""]

    - name: create the pod-reader role
      kubernetes.core.k8s:
        state: present
        definition:
          kind: Role
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            namespace: "{{ ns }}"
            name: pod-reader
          rules:
            - apiGroups: [""]
              resources: ["pods"]
              verbs: ["get", "watch", "list"]

    - name: create the configurator role RoleBinding
      kubernetes.core.k8s:
        state: present
        definition:
          kind: RoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: read-pods
            namespace: "{{ ns }}"
          subjects:
            - kind: ServiceAccount
              name: configurator
              namespace: "{{ ns }}"
          roleRef:
            kind: Role
            name: pod-reader
            apiGroup: rbac.authorization.k8s.io

    - name: create the app-exposer persistent volume provisioner cluster role binding
      kubernetes.core.k8s:
        state: present
        definition:
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: app-exposer-persistent-volume-provisioner
          subjects:
            - kind: ServiceAccount
              namespace: "{{ ns }}"
              name: app-exposer
          roleRef:
            kind: ClusterRole
            name: system:persistent-volume-provisioner
            apiGroup: rbac.authorization.k8s.io

    - name: create the app-exposer cluster role binding
      kubernetes.core.k8s:
        state: present
        definition:
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: app-exposer
          subjects:
            - kind: ServiceAccount
              namespace: "{{ ns }}"
              name: app-exposer
          roleRef:
            kind: ClusterRole
            name: admin
            apiGroup: rbac.authorization.k8s.io

    - name: create the exim-sender deployment
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: local-exim
            namespace: "{{ ns }}"
          spec:
            replicas: 2
            selector:
              matchLabels:
                de-app: local-exim
            template:
              metadata:
                labels:
                  de-app: local-exim
              spec:
                affinity:
                  podAntiAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchExpressions:
                            - key: de-app
                              operator: In
                              values:
                                - local-exim
                        topologyKey: kubernetes.io/hostname
                restartPolicy: Always
                containers:
                  - name: local-exim
                    image: "discoenv/exim-sender@sha256:af3543b26caba4407a3c6255721ca1cc02da63cd0886025262a6d8d11f6a1d96"
                    resources:
                      requests:
                        cpu: "5m"
                        memory: "128Mi"
                      limits:
                        cpu: "100m"
                        memory: "256Mi"
                    env:
                      - name: TZ
                        valueFrom:
                          configMapKeyRef:
                            name: timezone
                            key: timezone
                      - name: DE_ENV
                        value: "{{ ns }}"
                      - name: PRIMARY_HOST
                        value: cyverse.org
                      - name: ALLOWED_HOSTS
                        value: "*"
                      - name: SERVICE_25_NAME
                        value: exim-sender
                      - name: SERVICE_25_TAGS
                        value: "{{ ns }}"
                      - name: SERVICE_25_CHECK_TCP
                        value: "true"
                      - name: SERVICE_25_CHECK_INTERVAL
                        value: 10s
                    ports:
                      - name: listen-port
                        containerPort: 25

    - name: create exim-sender service
      run_once: True
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: local-exim
            namespace: "{{ ns }}"
          spec:
            selector:
              de-app: local-exim
            ports:
              - protocol: TCP
                port: 25
                targetPort: listen-port

    - name: create the unleash secret
      run_once: True
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: unleash-secret
            namespace: "{{ ns }}"
          type: Opaque
          stringData:
            database_host: "{{ groups['dbms'][0] }}"
            database_username: "{{ unleash_db_user }}"
            database_password: "{{ unleash_db_password }}"

    - name: create the unleash deployment
      run_once: True
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: unleash
            namespace: "{{ ns }}"
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: unleash
            template:
              metadata:
                labels:
                  app: unleash
              spec:
                affinity:
                  podAntiAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchExpressions:
                            - key: de-app
                              operator: In
                              values:
                                - unleash
                        topologyKey: kubernetes.io/hostname
                restartPolicy: Always
                containers:
                  - name: unleash
                    image: unleashorg/unleash-server:4.0.5
                    env:
                      - name: DATABASE_HOST
                        valueFrom:
                          secretKeyRef:
                            name: unleash-secret
                            key: database_host
                      - name: DATABASE_SSL
                        value: "false"
                      - name: DATABASE_NAME
                        value: "unleash"
                      - name: DATABASE_USERNAME
                        valueFrom:
                          secretKeyRef:
                            name: unleash-secret
                            key: database_username
                      - name: DATABASE_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: unleash-secret
                            key: database_password
                    ports:
                      - name: listen-port
                        containerPort: 4242
                    livenessProbe:
                      httpGet:
                        path: /
                        port: 4242
                      timeoutSeconds: 5
                      initialDelaySeconds: 30
                      periodSeconds: 20
                    readinessProbe:
                      httpGet:
                        path: /
                        port: 4242
                      timeoutSeconds: 5
                      initialDelaySeconds: 30
                      periodSeconds: 20

    - name: create the unleash secret
      run_once: True
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: unleash
            namespace: "{{ ns }}"
          spec:
            selector:
              app: unleash
            ports:
              - protocol: TCP
                port: 4242
                targetPort: listen-port

    - name: create the harbor json file
      ansible.builtin.copy:
        dest: "harbor_login.json"
        content: "{}"

    - name: add the credentials to the harbor json file
      community.docker.docker_login:
        config_path: "./harbor_login.json"
        password: "{{ harbor_robot_secret }}"
        registry_url: "{{ harbor_url }}"
        state: present
        username: "{{ harbor_robot_name }}"

    - name: create the harbor image pull secret
      kubernetes.core.k8s:
        state: present
        force: true
        definition:
          apiVersion: v1
          data:
            .dockerconfigjson: "{{ lookup('file', 'harbor_login.json') | b64encode }}"
          kind: secret
          metadata:
            name: "{{ vice_image_pull_secret }}"
            namespace: "{{ item }}"
          type: "kubernetes.io/dockerconfigjson"
      with_items:
        - "{{ argo_ns }}"
        - "{{ vice_ns }}"

    - name: remove the tempfile for the harbor login json
      ansible.builtin.file:
        path: harbor_login.json
        state: absent
