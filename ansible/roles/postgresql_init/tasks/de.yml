---
- delegate_to: localhost
  block:
    - name: create discovery environment databases
      when: create_dbs is defined and create_dbs
      community.postgresql.postgresql_db:
        login_host: "{{ groups['dbms'][0] }}"
        port: "{{ pg_listen_port }}"
        login_user: "{{ pg_login_user }}"
        login_password: "{{ pg_login_password }}"
        name: "{{ de_db_name }}"
        owner: "{{ dbms_connection_user }}"
        encoding: "{{ encoding }}"
        lc_collate: "{{ lc_collate }}"
        lc_ctype: "{{ lc_ctype }}"
        template: "{{ template }}"
      loop:
        - "{{de_db_name}}"
        - "{{notifications_db_name}}"
        - "{{metadata_db_name}}"

    - name: install extensions for the de database
      when: install_exts is defined and install_exts
      community.postgresql.postgresql_ext:
        login_host: "{{ groups['dbms'][0] }}"
        port: "{{ pg_listen_port }}"
        login_user: "{{ pg_login_user }}"
        login_password: "{{ pg_login_password }}"
        db: "{{ de_db_name }}"
        name: "{{item}}"
      loop:
        - uuid-ossp
        - moddatetime
        - btree_gist

    - name: install uuid-ossp for notifications database
      community.postgresql.postgresql_ext:
        login_host: "{{ groups['dbms'][0] }}"
        port: "{{ pg_listen_port }}"
        login_user: "{{ pg_login_user }}"
        login_password: "{{ pg_login_password }}"
        db: "{{ notifications_db_name }}"
        name: "uuid-ossp"
      when: install_exts is defined and install_exts

    - name: install uuid-ossp for metadata database
      community.postgresql.postgresql_ext:
        login_host: "{{ groups['dbms'][0] }}"
        port: "{{ pg_listen_port }}"
        login_user: "{{ pg_login_user }}"
        login_password: "{{ pg_login_password }}"
        db: "{{ metadata_db_name }}"
        name: "uuid-ossp"
      when: install_exts is defined and install_exts

    - name: checkout de database repo
      ansible.builtin.git:
        repo: "https://github.com/cyverse-de/de-database"
        dest: "{{ dbs_dir.path }}/de-database"
        clone: yes
        update: yes
        force: yes
        version: "{{ de_db_version }}"

    - name: checkout notifications database repo
      ansible.builtin.git:
        repo: "https://github.com/cyverse-de/notifications-db"
        dest: "{{ dbs_dir.path }}/notifications-db"
        clone: yes
        update: yes
        force: yes
        version: "{{ notifications_db_version }}"

    - name: checkout metadata database repo
      ansible.builtin.git:
        repo: "https://github.com/cyverse-de/metadata-db"
        dest: "{{ dbs_dir.path }}/metadata-db"
        clone: yes
        update: yes
        force: yes
        version: "{{ metadata_db_version }}"

    - name: run de database migrations
      ansible.builtin.command: >
        {{migrate_installed.stdout}}
        -database "postgresql://{{dbms_connection_user }}:{{dbms_connection_pass}}@{{ groups['dbms'][0] }}:{{ pg_listen_port }}/de?sslmode=disable"
        -path "{{ dbs_dir.path }}/de-database/migrations"
        up
      when: migrate is defined and migrate

    - name: run metadata db migrations
      ansible.builtin.command: >
        {{migrate_installed.stdout}}
        -database "postgresql://{{dbms_connection_user}}:{{dbms_connection_pass}}@{{ groups['dbms'][0] }}:{{ pg_listen_port }}/metadata?sslmode=disable"
        -path "{{ dbs_dir.path }}/metadata-db/migrations"
        up
      when: migrate is defined and migrate

    - name: run notifications db migrations
      ansible.builtin.command: >
        {{migrate_installed.stdout}}
        -database "postgresql://{{dbms_connection_user}}:{{dbms_connection_pass}}@{{ groups['dbms'][0] }}:{{ pg_listen_port }}/notifications?sslmode=disable"
        -path "{{ dbs_dir.path }}/notifications-db/migrations"
        up
      when: migrate is defined and migrate

    - name: add default instant launch mapping to the de db
      community.postgresql.postgresql_query:
        login_host: "{{ groups['dbms'][0] }}"
        port: "{{ pg_listen_port }}"
        login_user: "{{ pg_login_user }}"
        login_password: "{{ pg_login_password }}"
        db: "de"
        query: |
          INSERT INTO default_instant_launches
            (version, instant_launches, added_by)
          VALUES
            (0, '{}', '00000000-0000-0000-0000-000000000000')
          ON CONFLICT DO NOTHING
