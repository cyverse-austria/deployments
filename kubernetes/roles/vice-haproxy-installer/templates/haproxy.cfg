global
       log /dev/log    local0
       log /dev/log    local1 notice
       chroot /var/lib/haproxy
       stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
       stats timeout 30s
       user haproxy
       group haproxy
       daemon

       # Default SSL material locations
       ca-base /etc/ssl/certs
       crt-base /etc/ssl/private

       # Default ciphers to use on SSL-enabled listening sockets.
       # For more information, see ciphers(1SSL). This list is from:
       #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
       # An alternative list with additional directives can be obtained from
       #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
       ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
       ssl-default-bind-options no-sslv3
       maxconn 2048
       tune.ssl.default-dh-param 2048

defaults
       log     global
       mode    http
       option  httplog
       option  dontlognull
       option  forwardfor
       option  http-server-close
       timeout connect 5000
       timeout client  50000
       timeout server  50000
       errorfile 400 /etc/haproxy/errors/400.http
       errorfile 403 /etc/haproxy/errors/403.http
       errorfile 408 /etc/haproxy/errors/408.http
       errorfile 500 /etc/haproxy/errors/500.http
       errorfile 502 /etc/haproxy/errors/502.http
       errorfile 503 /etc/haproxy/errors/503.http
       errorfile 504 /etc/haproxy/errors/504.http

frontend reverseproxy
        mode http
        bind *:80
        bind *:443 ssl crt {{ tls_pem_path }}
        redirect scheme https if !{ ssl_fc }
        http-request set-var(req.subdomain) req.hdr(host),lower,regsub({{ regsub }}) if { hdr_end(host) -i .{{ domain }} }
        http-request set-header Host %[var(req.subdomain)] if { var(req.subdomain) -m found }
        default_backend proxynodes

backend proxynodes
       mode http
{% for host in groups['k8s-worker'] %}
       server   {{ hostvars[host].ansible_hostname }} {{ hostvars[host].ansible_fqdn }}:443 check ssl ca-file ca-certificates.crt
{% endfor %}

{% if include_dev %}
frontend dev_reverseproxy
        mode http
        bind *:4343 ssl crt /etc/ssl/certs/cyverse.run.pem
        http-request set-var(req.subdomain) req.hdr(host),lower,regsub(\.cyverse\.run\:4343$,) if { hdr_end(host) -i .cyverse.run:4343 }
        http-request set-header Host %[var(req.subdomain)] if { var(req.subdomain) -m found }
        default_backend dev_proxynodes

backend dev_proxynodes
        mode http
        server ingress0 services-2.cyverse.org:443 check ssl ca-file ca-certificates.crt
        server ingress1 qa-1.cyverse.org:443 check ssl ca-file ca-certificates.crt
        server ingress2 qa-3.cyverse.org:443 check ssl ca-file ca-certificates.crt
{% endif %}
